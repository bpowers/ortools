/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: wrapper/linear_solver.swig

#define SWIGMODULE ortools

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <string>


#include "linear_solver/linear_solver.h"

SWIGINTERN std::string operations_research_MPSolver_ExportModelAsLpFormat(operations_research::MPSolver *self,bool obfuscated){
    std::string output;
    if (!self->ExportModelAsLpFormat(obfuscated, &output)) return "";
    return output;
  }
SWIGINTERN std::string operations_research_MPSolver_ExportModelAsMpsFormat(operations_research::MPSolver *self,bool fixed_format,bool obfuscated){
    std::string output;
    if (!self->ExportModelAsMpsFormat(fixed_format, obfuscated, &output)) {
      return "";
    }
    return output;
  }
SWIGINTERN std::string operations_research_MPSolver_LoadModelFromProto(operations_research::MPSolver *self,operations_research::MPModelProto const &input_model){
    std::string error_message;
    self->LoadModelFromProto(input_model, &error_message);
    return error_message;
  }
SWIGINTERN double operations_research_MPSolver_PositiveInfinity(){ return operations_research::MPSolver::infinity(); }
SWIGINTERN void operations_research_MPSolver_SetTimeLimit(operations_research::MPSolver *self,int64 x){ self->set_time_limit(x); }
SWIGINTERN int64 operations_research_MPSolver_WallTime(operations_research::MPSolver const *self){ return self->wall_time(); }
SWIGINTERN std::string operations_research_MPVariable___str__(operations_research::MPVariable *self){
    return self->name();
  }
SWIGINTERN std::string operations_research_MPVariable___repr__(operations_research::MPVariable *self){
    return self->name();
  }
SWIGINTERN double operations_research_MPVariable_SolutionValue(operations_research::MPVariable const *self){ return self->solution_value(); }
SWIGINTERN void operations_research_MPVariable_SetLb(operations_research::MPVariable *self,double x){ self->SetLB(x); }
SWIGINTERN void operations_research_MPVariable_SetUb(operations_research::MPVariable *self,double x){ self->SetUB(x); }
SWIGINTERN double operations_research_MPVariable_ReducedCost(operations_research::MPVariable const *self){ return self->reduced_cost(); }
SWIGINTERN void operations_research_MPConstraint_SetLb(operations_research::MPConstraint *self,double x){ self->SetLB(x); }
SWIGINTERN void operations_research_MPConstraint_SetUb(operations_research::MPConstraint *self,double x){ self->SetUB(x); }
SWIGINTERN double operations_research_MPConstraint_DualValue(operations_research::MPConstraint const *self){ return self->dual_value(); }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_ortools_8bd0468efa37e4cc(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_ortools_8bd0468efa37e4cc(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


intgo _wrap_CLP_LINEAR_PROGRAMMING_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::OptimizationProblemType result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::CLP_LINEAR_PROGRAMMING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GLOP_LINEAR_PROGRAMMING_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::OptimizationProblemType result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::GLOP_LINEAR_PROGRAMMING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CBC_MIXED_INTEGER_PROGRAMMING_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::OptimizationProblemType result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::CBC_MIXED_INTEGER_PROGRAMMING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_BOP_INTEGER_PROGRAMMING_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::OptimizationProblemType result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::BOP_INTEGER_PROGRAMMING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


operations_research::MPSolver *_wrap_new_Solver_ortools_8bd0468efa37e4cc(_gostring_ _swig_go_0, intgo _swig_go_1) {
  std::string *arg1 = 0 ;
  operations_research::MPSolver::OptimizationProblemType arg2 ;
  operations_research::MPSolver *result = 0 ;
  operations_research::MPSolver *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (operations_research::MPSolver::OptimizationProblemType)_swig_go_1; 
  
  result = (operations_research::MPSolver *)new operations_research::MPSolver((std::string const &)*arg1,arg2);
  *(operations_research::MPSolver **)&_swig_go_result = (operations_research::MPSolver *)result; 
  return _swig_go_result;
}


void _wrap_delete_Solver_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_Solver_SupportsProblemType_ortools_8bd0468efa37e4cc(intgo _swig_go_0) {
  operations_research::MPSolver::OptimizationProblemType arg1 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (operations_research::MPSolver::OptimizationProblemType)_swig_go_0; 
  
  result = (bool)operations_research::MPSolver::SupportsProblemType(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Solver_Clear_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  (arg1)->Clear();
  
}


intgo _wrap_Solver_NumVariables_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = (int)((operations_research::MPSolver const *)arg1)->NumVariables();
  _swig_go_result = result; 
  return _swig_go_result;
}


operations_research::MPVariable *_wrap_Solver_LookupVariable_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, _gostring_ _swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPVariable *result = 0 ;
  operations_research::MPVariable *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (operations_research::MPVariable *)((operations_research::MPSolver const *)arg1)->LookupVariableOrNull((std::string const &)*arg2);
  *(operations_research::MPVariable **)&_swig_go_result = (operations_research::MPVariable *)result; 
  return _swig_go_result;
}


operations_research::MPVariable *_wrap_Solver_NumVar_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, double _swig_go_1, double _swig_go_2, _gostring_ _swig_go_3) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPVariable *result = 0 ;
  operations_research::MPVariable *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  result = (operations_research::MPVariable *)(arg1)->MakeNumVar(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::MPVariable **)&_swig_go_result = (operations_research::MPVariable *)result; 
  return _swig_go_result;
}


operations_research::MPVariable *_wrap_Solver_IntVar_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, double _swig_go_1, double _swig_go_2, _gostring_ _swig_go_3) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPVariable *result = 0 ;
  operations_research::MPVariable *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  result = (operations_research::MPVariable *)(arg1)->MakeIntVar(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::MPVariable **)&_swig_go_result = (operations_research::MPVariable *)result; 
  return _swig_go_result;
}


operations_research::MPVariable *_wrap_Solver_BoolVar_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, _gostring_ _swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPVariable *result = 0 ;
  operations_research::MPVariable *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (operations_research::MPVariable *)(arg1)->MakeBoolVar((std::string const &)*arg2);
  *(operations_research::MPVariable **)&_swig_go_result = (operations_research::MPVariable *)result; 
  return _swig_go_result;
}


intgo _wrap_Solver_NumConstraints_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = (int)((operations_research::MPSolver const *)arg1)->NumConstraints();
  _swig_go_result = result; 
  return _swig_go_result;
}


operations_research::MPConstraint *_wrap_Solver_LookupConstraint_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, _gostring_ _swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  operations_research::MPConstraint *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (operations_research::MPConstraint *)((operations_research::MPSolver const *)arg1)->LookupConstraintOrNull((std::string const &)*arg2);
  *(operations_research::MPConstraint **)&_swig_go_result = (operations_research::MPConstraint *)result; 
  return _swig_go_result;
}


operations_research::MPConstraint *_wrap_Solver_Constraint__SWIG_0_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, double _swig_go_1, double _swig_go_2) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  operations_research::MPConstraint *result = 0 ;
  operations_research::MPConstraint *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint(arg2,arg3);
  *(operations_research::MPConstraint **)&_swig_go_result = (operations_research::MPConstraint *)result; 
  return _swig_go_result;
}


operations_research::MPConstraint *_wrap_Solver_Constraint__SWIG_1_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPConstraint *result = 0 ;
  operations_research::MPConstraint *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint();
  *(operations_research::MPConstraint **)&_swig_go_result = (operations_research::MPConstraint *)result; 
  return _swig_go_result;
}


operations_research::MPConstraint *_wrap_Solver_Constraint__SWIG_2_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, double _swig_go_1, double _swig_go_2, _gostring_ _swig_go_3) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  operations_research::MPConstraint *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::MPConstraint **)&_swig_go_result = (operations_research::MPConstraint *)result; 
  return _swig_go_result;
}


operations_research::MPConstraint *_wrap_Solver_Constraint__SWIG_3_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, _gostring_ _swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  operations_research::MPConstraint *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint((std::string const &)*arg2);
  *(operations_research::MPConstraint **)&_swig_go_result = (operations_research::MPConstraint *)result; 
  return _swig_go_result;
}


operations_research::MPConstraint *_wrap_Solver_Constraint__SWIG_4_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, LinearRange *_swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  LinearRange *arg2 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  operations_research::MPConstraint *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = *(LinearRange **)&_swig_go_1; 
  
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint((LinearRange const &)*arg2);
  *(operations_research::MPConstraint **)&_swig_go_result = (operations_research::MPConstraint *)result; 
  return _swig_go_result;
}


operations_research::MPConstraint *_wrap_Solver_Constraint__SWIG_5_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, LinearRange *_swig_go_1, _gostring_ _swig_go_2) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  LinearRange *arg2 = 0 ;
  std::string *arg3 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  operations_research::MPConstraint *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = *(LinearRange **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint((LinearRange const &)*arg2,(std::string const &)*arg3);
  *(operations_research::MPConstraint **)&_swig_go_result = (operations_research::MPConstraint *)result; 
  return _swig_go_result;
}


operations_research::MPObjective *_wrap_Solver_Objective_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPObjective *result = 0 ;
  operations_research::MPObjective *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = (operations_research::MPObjective *)(arg1)->MutableObjective();
  *(operations_research::MPObjective **)&_swig_go_result = (operations_research::MPObjective *)result; 
  return _swig_go_result;
}


intgo _wrap_OPTIMAL_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::OPTIMAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FEASIBLE_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::FEASIBLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INFEASIBLE_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::INFEASIBLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_UNBOUNDED_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::UNBOUNDED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ABNORMAL_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::ABNORMAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_NOT_SOLVED_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::NOT_SOLVED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Solver_Solve__SWIG_0_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = (operations_research::MPSolver::ResultStatus)(arg1)->Solve();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Solver_Solve__SWIG_1_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, operations_research::MPSolverParameters *_swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolverParameters *arg2 = 0 ;
  operations_research::MPSolver::ResultStatus result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = *(operations_research::MPSolverParameters **)&_swig_go_1; 
  
  result = (operations_research::MPSolver::ResultStatus)(arg1)->Solve((operations_research::MPSolverParameters const &)*arg2);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_Solver_ComputeConstraintActivities_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< double > result;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = ((operations_research::MPSolver const *)arg1)->ComputeConstraintActivities();
  *(std::vector< double > **)&_swig_go_result = new std::vector< double >(result); 
  return _swig_go_result;
}


bool _wrap_Solver_VerifySolution_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, double _swig_go_1, bool _swig_go_2) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)((operations_research::MPSolver const *)arg1)->VerifySolution(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Solver_InterruptSolve_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = (bool)(arg1)->InterruptSolve();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Solver_SetSolverSpecificParametersAsString_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, _gostring_ _swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->SetSolverSpecificParametersAsString((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_FREE_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::BasisStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::FREE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AT_LOWER_BOUND_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::BasisStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::AT_LOWER_BOUND;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AT_UPPER_BOUND_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::BasisStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::AT_UPPER_BOUND;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FIXED_VALUE_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::BasisStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::FIXED_VALUE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_BASIC_Solver_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolver::BasisStatus result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolver::BASIC;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


double _wrap_Solver_infinity_ortools_8bd0468efa37e4cc() {
  double result;
  double _swig_go_result;
  
  
  result = (double)operations_research::MPSolver::infinity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Solver_EnableOutput_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  (arg1)->EnableOutput();
  
}


void _wrap_Solver_SuppressOutput_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  (arg1)->SuppressOutput();
  
}


void _wrap_Solver_set_time_limit_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, int64 *_swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 arg2 ;
  int64 *argp2 ;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  argp2 = (int64 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null int64");
  }
  arg2 = (int64)*argp2;
  
  
  (arg1)->set_time_limit(arg2);
  
}


int64 *_wrap_Solver_wall_time_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 result;
  int64 *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = ((operations_research::MPSolver const *)arg1)->wall_time();
  *(int64 **)&_swig_go_result = new int64(result); 
  return _swig_go_result;
}


int64 *_wrap_Solver_iterations_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 result;
  int64 *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = ((operations_research::MPSolver const *)arg1)->iterations();
  *(int64 **)&_swig_go_result = new int64(result); 
  return _swig_go_result;
}


int64 *_wrap_Solver_nodes_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 result;
  int64 *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = ((operations_research::MPSolver const *)arg1)->nodes();
  *(int64 **)&_swig_go_result = new int64(result); 
  return _swig_go_result;
}


double _wrap_Solver_ComputeExactConditionNumber_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = (double)((operations_research::MPSolver const *)arg1)->ComputeExactConditionNumber();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Solver_ExportModelAsLpFormat_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, bool _swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = operations_research_MPSolver_ExportModelAsLpFormat(arg1,arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Solver_ExportModelAsMpsFormat_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, bool _swig_go_1, bool _swig_go_2) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = operations_research_MPSolver_ExportModelAsMpsFormat(arg1,arg2,arg3);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Solver_LoadModelFromProto_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, operations_research::MPModelProto *_swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPModelProto *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  arg2 = *(operations_research::MPModelProto **)&_swig_go_1; 
  
  result = operations_research_MPSolver_LoadModelFromProto(arg1,(operations_research::MPModelProto const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


double _wrap_Solver_PositiveInfinity_ortools_8bd0468efa37e4cc() {
  double result;
  double _swig_go_result;
  
  
  result = (double)operations_research_MPSolver_PositiveInfinity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Solver_SetTimeLimit_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0, int64 *_swig_go_1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 arg2 ;
  int64 *argp2 ;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  argp2 = (int64 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null int64");
  }
  arg2 = (int64)*argp2;
  
  
  operations_research_MPSolver_SetTimeLimit(arg1,arg2);
  
}


int64 *_wrap_Solver_WallTime_ortools_8bd0468efa37e4cc(operations_research::MPSolver *_swig_go_0) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 result;
  int64 *_swig_go_result;
  
  arg1 = *(operations_research::MPSolver **)&_swig_go_0; 
  
  result = operations_research_MPSolver_WallTime((operations_research::MPSolver const *)arg1);
  *(int64 **)&_swig_go_result = new int64(result); 
  return _swig_go_result;
}


void _wrap_Objective_Clear_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  (arg1)->Clear();
  
}


void _wrap_Objective_SetCoefficient_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0, operations_research::MPVariable *_swig_go_1, double _swig_go_2) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double arg3 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  arg2 = *(operations_research::MPVariable **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  (arg1)->SetCoefficient((operations_research::MPVariable const *)arg2,arg3);
  
}


double _wrap_Objective_GetCoefficient_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0, operations_research::MPVariable *_swig_go_1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  arg2 = *(operations_research::MPVariable **)&_swig_go_1; 
  
  result = (double)((operations_research::MPObjective const *)arg1)->GetCoefficient((operations_research::MPVariable const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Objective_SetOffset_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0, double _swig_go_1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->SetOffset(arg2);
  
}


double _wrap_Objective_offset_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  result = (double)((operations_research::MPObjective const *)arg1)->offset();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Objective_AddOffset_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0, double _swig_go_1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->AddOffset(arg2);
  
}


void _wrap_Objective_SetOptimizationDirection_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0, bool _swig_go_1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool arg2 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->SetOptimizationDirection(arg2);
  
}


void _wrap_Objective_SetMinimization_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  (arg1)->SetMinimization();
  
}


void _wrap_Objective_SetMaximization_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  (arg1)->SetMaximization();
  
}


bool _wrap_Objective_maximization_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  result = (bool)((operations_research::MPObjective const *)arg1)->maximization();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Objective_minimization_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  result = (bool)((operations_research::MPObjective const *)arg1)->minimization();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Objective_Value_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  result = (double)((operations_research::MPObjective const *)arg1)->Value();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Objective_BestBound_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  result = (double)((operations_research::MPObjective const *)arg1)->BestBound();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Objective_ortools_8bd0468efa37e4cc(operations_research::MPObjective *_swig_go_0) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = *(operations_research::MPObjective **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap_Variable_name_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (std::string *) &((operations_research::MPVariable const *)arg1)->name();
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


bool _wrap_Variable_integer_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (bool)((operations_research::MPVariable const *)arg1)->integer();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Variable_solution_value_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (double)((operations_research::MPVariable const *)arg1)->solution_value();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Variable_index_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (int)((operations_research::MPVariable const *)arg1)->index();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Variable_lb_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (double)((operations_research::MPVariable const *)arg1)->lb();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Variable_ub_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (double)((operations_research::MPVariable const *)arg1)->ub();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Variable_reduced_cost_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (double)((operations_research::MPVariable const *)arg1)->reduced_cost();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Variable_basis_status_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  operations_research::MPSolver::BasisStatus result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (operations_research::MPSolver::BasisStatus)((operations_research::MPVariable const *)arg1)->basis_status();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Variable___str___ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = operations_research_MPVariable___str__(arg1);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Variable___repr___ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = operations_research_MPVariable___repr__(arg1);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


double _wrap_Variable_SolutionValue_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (double)operations_research_MPVariable_SolutionValue((operations_research::MPVariable const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Variable_SetLb_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0, double _swig_go_1) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  operations_research_MPVariable_SetLb(arg1,arg2);
  
}


void _wrap_Variable_SetUb_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0, double _swig_go_1) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  operations_research_MPVariable_SetUb(arg1,arg2);
  
}


double _wrap_Variable_ReducedCost_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  result = (double)operations_research_MPVariable_ReducedCost((operations_research::MPVariable const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Variable_ortools_8bd0468efa37e4cc(operations_research::MPVariable *_swig_go_0) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  
  arg1 = *(operations_research::MPVariable **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap_Constraint_name_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  result = (std::string *) &((operations_research::MPConstraint const *)arg1)->name();
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Constraint_SetCoefficient_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, operations_research::MPVariable *_swig_go_1, double _swig_go_2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double arg3 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = *(operations_research::MPVariable **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  (arg1)->SetCoefficient((operations_research::MPVariable const *)arg2,arg3);
  
}


double _wrap_Constraint_GetCoefficient_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, operations_research::MPVariable *_swig_go_1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = *(operations_research::MPVariable **)&_swig_go_1; 
  
  result = (double)((operations_research::MPConstraint const *)arg1)->GetCoefficient((operations_research::MPVariable const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Constraint_lb_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  result = (double)((operations_research::MPConstraint const *)arg1)->lb();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Constraint_ub_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  result = (double)((operations_research::MPConstraint const *)arg1)->ub();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Constraint_SetLB_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, double _swig_go_1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->SetLB(arg2);
  
}


void _wrap_Constraint_SetUB_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, double _swig_go_1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->SetUB(arg2);
  
}


void _wrap_Constraint_SetBounds_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, double _swig_go_1, double _swig_go_2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  (arg1)->SetBounds(arg2,arg3);
  
}


void _wrap_Constraint_set_is_lazy_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, bool _swig_go_1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->set_is_lazy(arg2);
  
}


intgo _wrap_Constraint_index_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  result = (int)((operations_research::MPConstraint const *)arg1)->index();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Constraint_dual_value_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  result = (double)((operations_research::MPConstraint const *)arg1)->dual_value();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Constraint_basis_status_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPSolver::BasisStatus result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  result = (operations_research::MPSolver::BasisStatus)((operations_research::MPConstraint const *)arg1)->basis_status();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_Constraint_SetLb_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, double _swig_go_1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  operations_research_MPConstraint_SetLb(arg1,arg2);
  
}


void _wrap_Constraint_SetUb_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0, double _swig_go_1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  operations_research_MPConstraint_SetUb(arg1,arg2);
  
}


double _wrap_Constraint_DualValue_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  result = (double)operations_research_MPConstraint_DualValue((operations_research::MPConstraint const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Constraint_ortools_8bd0468efa37e4cc(operations_research::MPConstraint *_swig_go_0) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  
  arg1 = *(operations_research::MPConstraint **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RELATIVE_MIP_GAP_MPSolverParameters_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolverParameters::DoubleParam result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolverParameters::RELATIVE_MIP_GAP;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PRESOLVE_MPSolverParameters_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolverParameters::IntegerParam result;
  intgo _swig_go_result;
  
  
  result = operations_research::MPSolverParameters::PRESOLVE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


double _wrap_MPSolverParameters_kDefaultPrimalTolerance_get_ortools_8bd0468efa37e4cc() {
  double result;
  double _swig_go_result;
  
  
  result = (double)(double)operations_research::MPSolverParameters::kDefaultPrimalTolerance;
  _swig_go_result = result; 
  return _swig_go_result;
}


operations_research::MPSolverParameters *_wrap_new_MPSolverParameters_ortools_8bd0468efa37e4cc() {
  operations_research::MPSolverParameters *result = 0 ;
  operations_research::MPSolverParameters *_swig_go_result;
  
  
  result = (operations_research::MPSolverParameters *)new operations_research::MPSolverParameters();
  *(operations_research::MPSolverParameters **)&_swig_go_result = (operations_research::MPSolverParameters *)result; 
  return _swig_go_result;
}


void _wrap_MPSolverParameters_SetDoubleParam_ortools_8bd0468efa37e4cc(operations_research::MPSolverParameters *_swig_go_0, intgo _swig_go_1, double _swig_go_2) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::DoubleParam arg2 ;
  double arg3 ;
  
  arg1 = *(operations_research::MPSolverParameters **)&_swig_go_0; 
  arg2 = (operations_research::MPSolverParameters::DoubleParam)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  (arg1)->SetDoubleParam(arg2,arg3);
  
}


void _wrap_MPSolverParameters_SetIntegerParam_ortools_8bd0468efa37e4cc(operations_research::MPSolverParameters *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::IntegerParam arg2 ;
  int arg3 ;
  
  arg1 = *(operations_research::MPSolverParameters **)&_swig_go_0; 
  arg2 = (operations_research::MPSolverParameters::IntegerParam)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SetIntegerParam(arg2,arg3);
  
}


double _wrap_MPSolverParameters_GetDoubleParam_ortools_8bd0468efa37e4cc(operations_research::MPSolverParameters *_swig_go_0, intgo _swig_go_1) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::DoubleParam arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(operations_research::MPSolverParameters **)&_swig_go_0; 
  arg2 = (operations_research::MPSolverParameters::DoubleParam)_swig_go_1; 
  
  result = (double)((operations_research::MPSolverParameters const *)arg1)->GetDoubleParam(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MPSolverParameters_GetIntegerParam_ortools_8bd0468efa37e4cc(operations_research::MPSolverParameters *_swig_go_0, intgo _swig_go_1) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::IntegerParam arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(operations_research::MPSolverParameters **)&_swig_go_0; 
  arg2 = (operations_research::MPSolverParameters::IntegerParam)_swig_go_1; 
  
  result = (int)((operations_research::MPSolverParameters const *)arg1)->GetIntegerParam(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_MPSolverParameters_ortools_8bd0468efa37e4cc(operations_research::MPSolverParameters *_swig_go_0) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  
  arg1 = *(operations_research::MPSolverParameters **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

